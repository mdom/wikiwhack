#!/bin/sh

base_url=""

if [ -e "$HOME/.wikiwhackrc" ]; then
    # shellcheck disable=SC1091
    . "$HOME/.wikiwhackrc"
fi

if [ -z "$base_url" ]; then
    printf "Config parameter base_url is not set." >&2
    exit 1
fi

get(){
    curl -sS -H "Content-Type: application/json" "$base_url/wiki/$1.json?key=$REDMINE_APIKEY"
}

put(){
    curl -sS --request PUT --data-binary @- -H "Content-Type: application/json" "$base_url/wiki/$1.json?key=$REDMINE_APIKEY"
}

_search(){
    curl -sS --get -H "Content-Type: application/json" "$base_url/search.json?key=$REDMINE_APIKEY" -d "q=$1" -d "offset=$2" -d "limit=$3"
}

filter_page(){
    awk -v width=${FZF_PREVIEW_COLUMNS:-70} '
        BEGIN {
            escape = ""
            bold   = escape "[1m"
            normal = escape "[0m"
            quote  = sprintf("%c", 39);
            current = 0
            output_index = 0
        }

        function add_output (text, preformatted ) {
            if ( !preformatted && text output[output_index-1] == "")
                return
            output[output_index++] = text
        }

        function decode_entities ( text ) {
           while ( match(text, /&#[0-9]+;/) != 0 ) {
               text = substr(text, 0, RSTART - 1) \
                      sprintf("%c", 0+substr(text, RSTART + 2, RLENGTH - 3 )) \
                      substr(text, RSTART + RLENGTH)
           }
           gsub(/&quot;/, quote, text)
           return text
        }

        function print_block () {
            if ( current == 0 && lines[current] == "" ) return
            add_output("")
            for ( i = 0; i <= current; i++ ) {
                if ( !lines[i] ) continue
                add_output(lines[i])
                delete lines[i]
            }
            current = 0
            add_output("")
        }

        {
            $0 = decode_entities($0)
        }

        /^h[0-9]\([^)]+\)\./{
            sub(/\([^)]+\)/, "")
        }
        /^h[0-9]./{
            print_block()
            add_output(bold $0 normal)
            next
        }
        /<pre>/,/<\/pre>/ {
            print_block()
            add_output($0, 1)
            next
        }
        /^$/ {
            print_block()
            next
        }
        {
            for(i=1; i<=NF; i++) {
                if ( length($i) + length(lines[current]) > width && lines[current] != "") current++
                joiner = lines[current] ? " " : ""
                lines[current] = lines[current] joiner $i
            }
        }
        END {
            print_block()
            for ( i = 0; i <= output_index; i++ )
                if (output[i] != "") {
                    first_line = i
                    break
                }
            for ( i = output_index; i >= 0; i-- )
                if (output[i] != "") {
                    last_line = i
                    break
                }
            for ( i = first_line; i <= last_line; i++ )
                print output[i]
        }
    '
}

get_titles(){
    get 'index' | jq -r '.wiki_pages|.[]|.title'
}

get_text(){
    get "$1" | jq -r '.wiki_page|.text'
}

cat_page(){
    get_text "$1" |filter_page
}

view_page(){
    _tmp=$HOME/.wikiwhack.$$.less.tmp
    get_text "$1" |filter_page > "$_tmp"
    LESSEDIT="$0 edit '$1'" less -R "$_tmp"
    rm "$_tmp"
}

edit_page(){
    _tmp=$HOME/.wikiwhack.$$.edit.tmp
    get_text "$1" > "$_tmp"
    cp "$_tmp" "$_tmp~"
    $EDITOR "$_tmp" < /dev/tty

    if ! diff -q "$_tmp" "$_tmp~" > /dev/null ; then
        jq --slurp -R '{"wiki_page": { "text": . }}' < "$_tmp" | put "$1"
    fi

    rm -f "$_tmp" "$_tmp~"
}

search(){
    _tmp=$HOME/.wikiwhack.$$.search.tmp
    if [ -z "$1" ]; then
        get_titles
    fi
    total_count=$( _search "$1" 0 1 | jq '(.total_count//0)')

    if [ "$total_count" -eq 0 ]; then
        return
    fi

    offset=0
    while [ "$offset" -lt "$total_count" ]; do
        _search "$1" $offset 100 | jq -r '.results|.[]|.title'|sed 's/^Wiki: //' >> "$_tmp"
        offset=$(( offset + 100 ))
    done

    cat "$_tmp"
    rm "$_tmp"
}

case $1 in
    edit ) 
        edit_page "$2"
        ;;
    view ) 
        view_page "$2"
        ;;
    search )
        search "$2"
        ;;
    titles )
        get_titles
        ;;
    cat )
        cat_page "$2"
        ;;
    filter ) 
        filter_page
        ;;
    "")
        get_titles | fzf \
            --preview="$0 cat {}" \
            --bind="enter:toggle-preview" \
            --bind="alt-s:reload#$0 search {q}#+clear-query" \
            --bind="alt-c:execute#$0 edit {q}#+reload:$0 titles" \
            --bind="alt-e:execute:$0 edit {}" \
            --bind="alt-v:execute:$0 view {}" \
            --bind="alt-j:preview-half-page-down" \
            --bind="alt-k:preview-half-page-up" \
            --bind="alt-q:abort" \
            --color="header:reverse" \
            --info=inline \
            --ansi \
            --preview-window=hidden \
            --header='M-e:edit M-s:search M-v:less ENTER:preview M-q:quit'
        ;;
esac
